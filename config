

version ("1.4.0:arch=3"); # Akeno version that the config was made for - DO NOT CHANGE (if you dont know what it could do :D)


server {
    # The port to use for listening
    port: 80;

    enableSSL;
    sslPort: 443;

    # Enable server; Enable sub-host
    enableBuild;
    enableHost: prod;

    hostSocketName: "eg_persistentHost";

    # Required. Path to where Akeno is located.
    PATH: "/www/content/akeno/";
}

performance {
    # How many threads to spawn for multi-threading. Range between 1 to the amount of your CPU cores.
    threads: 2;

    # Compressor - shared or dedicated and how much RAM to dedicate per socket.
    compressor: dedicated 32kb;

    # Compress JS, HTML, CSS on the fly
    code-compression;

    # Enable caching for individual files in-memory.
    file-cache;

    # Enable the ?mtime query to be added to requests, automatically refreshing files that have been changed while caching still works.
    mtime-query;

    # Either uWS or Express - uWS is a low-level native socket, Express uses Node.JS APIs. uWS is faster, Express is more dynamic.
    backend: uWS;
    # Support is not guaranted.
}

web {
    locations:
        # website locations
        "/www/content/web/*",
        "/www/content/akeno/web/*",
        "/www/proj/glitter/demo/",
        "/www/content/shared/wss/web/*",
        "/www/proj/creator/*"
    ;
}

# plugins {
#     # Add or remove plugins

#     guardian: {
#         captcha: auth.lstv.space;
#     };

#     http: {
#         proxy: nginx;
#         port: 7007;
#     }

#     web: {
#         parser; # Parse special Akeno syntax
#         code-compression; # Auto compress HTML, CSS, and JS
#         cache-management; # Automatically set cahce and update based on file mtime

#         # Default config for all webservers
#         defaults: {
#             server {
#                 allow-backend; # Allow the api option - allows to configure custom API endpoints
#             }
#         }
#     };

#     cdn: {
#         files;
#         ls;
#     };

#     api;
#     cli;
#     intersocket;
# }

# environment {
#     git: {
#         managed;
#     }
# }