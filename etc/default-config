

# This is the default config that will get created after you first launch the server with no /config file.

# Import generated configs created automatically by the CLI
import("./etc/generated");

# Do not change
configVersion("1.3.0");

server {
    # The port to use for listening
    port: 80;

    # enableSSL;
    # sslPort: 443;

    # Enable server; Enable sub-host
    enableBuild;

    # In case you are using persistent.js to manage persistent shared proccesses
    # enableHost;
    # hostSocketName: "eg_persistentHost";

    # Required. Path to where Akeno is located.
    PATH: "/www/content/akeno/";
}

web {
    locations:
        # Website locations - /* will take all directories inside as individual locations.
        # If the directory is not found, it is simply skipped along with a console warning.
        "/www/content/web/*",
        "/www/content/akeno/examples/hello-world-website",
        "/www/content/akeno/core/gui",
    ;
}

sslRouter {
    # Currently the options for sslRouter are very limited and only suited for a thin range of configurations
    # To allow multiple certificates, you add server names below.

    certBase: "/www/server/certs/{domain}/fullchain.pem";
    keyBase: "/www/server/certs/{domain}/privkey.pem";

    domains:
        lstv.space,
        extragon.cloud,
        upedie.online
    ;

    autoAddDomains;
    subdomainWildcard;
}

# Route requests to API/webserver/CDN based on domain
baseRouter {
    web: "*";
    api: "api.*";
    cdn: "cdn.*", "cdn-origin.*";
}

# If you intend to use a SQL database
database {
    enabled: false;
    
    host: "...";
    user: "...";
    password: "...";
}

performance {
    # How many threads to spawn for multi-threading. Range between 1 to the amount of your CPU cores.
    threads: 2;

    # Compressor - shared or dedicated and how much RAM to dedicate per socket.
    compressor: dedicated 32kb;

    # Compress JS, HTML, CSS on the fly
    code-compression;

    # Enable caching for individual files in-memory.
    file-cache;

    # Enable the ?mtime query to be added to requests, automatically refreshing files that have been changed while caching still works.
    mtime-query;

    # Either uWS or Express - uWS is a low-level native socket, Express uses Node.JS APIs. uWS is faster, Express is more dynamic.
    backend: uWS;
    # Support is not guaranted.
}

# plugins {
#     # Add or remove plugins

#     guardian: {
#         captcha: auth.lstv.space;
#     };

#     web: {
#         parser; # Parse special Akeno syntax
#         code-compression; # Auto compress HTML, CSS, and JS
#         cache-management; # Automatically set cahce and update based on file mtime

#         # Default config for all webservers
#         defaults: {
#             server {
#                 allow-backend; # Allow the api option - allows to configure custom API endpoints
#             }
#         }
#     };
# }

# environment {
#     git: {
#         managed;
#     }
# }