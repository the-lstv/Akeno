

# This is the default config that will get created after you first launch the server with no /config file.

# Import generated configs created automatically by the CLI
import("./etc/generated");

system {
    # You can enable development mode when not in production - it enabled some extra debugging tools.

    # developmentMode;
    # logLevel: 5;
}

server {
    # The port to use for HTTP
    port: 80;

    # Enable SSL (HTTPS)
    # enableSSL;
    sslPort: 443;

    # Enable HTTP3
    # enableH3;
    h3Port: 443;

    # Enable server
    enable;
}

web {
    locations:
        # Website locations - /* will take all directories inside as individual locations.
        "/var/www/akeno/*",
        "/var/lib/akeno/examples/hello-world-website",
        "/var/lib/akeno/core/gui"
    ;
}

# More info on libraries is in /cdn/lib
cdn.libraries {
    locations:
        "./cdn/lib/*",
    ;
}

sslRouter {
    # Currently the options for sslRouter are very limited and only suited for a thin range of configurations
    # To allow multiple certificates, you add server names below.

    certBase: "/etc/letsencrypt/live/{domain}/fullchain.pem";
    keyBase: "/etc/letsencrypt/live/{domain}/privkey.pem";

    domains:
        example.com, # Only example.com
        *.example2.com, # example2.com + all subdomains
        another.example3.com # Only another.example3.com
    ;

    autoAddDomains;
    subdomainWildcard;
}

# If you intend to use a SQL database
database {
    enabled: false;
    
    host: "...";
    user: "...";
    password: "...";
}

performance {
    # How many threads to spawn for multi-threading. Range between 1 to the amount of your CPU cores.
    threads: 2;

    # Compressor - shared or dedicated and how much RAM to dedicate per socket.
    compressor: dedicated 32kb;

    # Compress JS, HTML, CSS on the fly
    code-compression;

    # Cache to both disk and memory
    cache-to: disk, memory;

    # Enable caching for individual files in-memory.
    file-cache;

    # Enable the ?mtime query to be added to requests, automatically refreshing files that have been changed while caching still works.
    mtime-query;

    # Either uWS or Express - uWS is a low-level native socket, Express uses Node.JS APIs. uWS is faster, Express is more dynamic.
    backend: uWS;
    # Support is not guaranted.
}